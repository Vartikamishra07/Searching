1.Recursive approach

class Solution 
{
public:
    int recursive_binary(vector<int>&nums , int low , int high , int target)
    {
        if(low>high) return -1;
        int mid=(low+high)/2;
        if(nums[mid]==target) return mid;
        else if(nums[mid]<target) 
        {
           return  recursive_binary(nums , mid+1 , high , target);
        }
        return recursive_binary(nums , low , mid-1 , target);
    }
    int search(vector<int>& nums, int target) 
    {
        return recursive_binary(nums , 0 , nums.size()-1 , target);  
    }
};

2. Iterative approach

class Solution 
{
public:
    
    int search(vector<int>& nums, int target) 
    {
        int low=0;
        int high=nums.size()-1;
        while(low<=high)
        {
            int mid=(low+high)/2;
            if(nums[mid]==target) return mid;
            else if(target<nums[mid]) high=mid-1;
            else low=mid+1;
        }
        return -1;
    }
};
