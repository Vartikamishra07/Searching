1. Naive approach
int count(vector<int>& arr, int n, int x) {
    int cnt = 0;
    for (int i = 0; i < n; i++) {

        // counting the occurrences:
        if (arr[i] == x) cnt++;
    }
    return cnt;
}

2. Using binary search

class Solution{
public:	
	/* if x is present in arr[] then returns the count
		of occurrences of x, otherwise returns 0. */
	int count(int arr[], int n, int x) 
	{
	    int left = find_left(arr, n, x);
	    if (left == -1) // Check if x is not found
	    {
	        return 0;
	    }
	    int right = find_right(arr, n, x);
	    int count = (right - left) + 1;
	    return count;
	}

	int find_left(int nums[], int n, int x)
	{
	    int left = 0;
        int right = n - 1;
        int result = -1; // Initialize to -1
        
        while (left <= right) 
        {
            int mid = left + (right - left) / 2;
            
            if (nums[mid] == x) 
            {
                result = mid; // Potential leftmost index found
                right = mid - 1; // Look further left
            } 
            else if (nums[mid] < x) 
            {
                left = mid + 1;
            } 
            else 
            {
                right = mid - 1;
            }
        }
        
        return result;
	}

	int find_right(int nums[], int n, int x)
	{
	    int left = 0;
        int right = n - 1;
        int result = -1; // Initialize to -1
        
        while (left <= right) 
        {
            int mid = left + (right - left) / 2;
            
            if (nums[mid] == x) 
            {
                result = mid; // Potential rightmost index found
                left = mid + 1; // Look further right
            } 
            else if (nums[mid] < x) 
            {
                left = mid + 1;
            } 
            else 
            {
                right = mid - 1;
            }
        }
        
        return result;
	}
};
